1- Given a string, find the length of the longest substring without repeating characters.

public class Solution {
    public int lengthOfLongestSubstring(String A) {
        if(A==null || A.length()==0)
        return 0;
 
    HashSet<Character> set = new HashSet<Character>();
 
    int max=0;
 
    
    int start=0;
    for(int i=0; i<A.length(); i++){
        char c = A.charAt(i);
        if(!set.contains(c)){
            set.add(c);
        }else{
            max = Math.max(max, set.size());
 
            while(start<i&&A.charAt(start)!=c){
                set.remove(A.charAt(start));
                start++;
            }
            start++;
        }
 
    }
 
    max = Math.max(max, set.size());
 
    return max;
    }
}

----------------------------------------------------------

2- Given an array of strings, return all groups of strings that are anagrams. Represent a group by a list of integers representing the index in the original list. Look at the sample case for clarification. 

public class Solution {
	public ArrayList<ArrayList<Integer>> anagrams(final List<String> a) {
	    
	    ArrayList<ArrayList<Integer>> resultAarray = new ArrayList<ArrayList<Integer>>();
        HashMap<String, ArrayList<Integer>> hashMap = new HashMap<String, ArrayList<Integer>>();
	    for(int i = 0; i < a.size(); i++){
	        char [] charAr=a.get(i).toCharArray();
	        Arrays.sort(charAr);
	        String strValue=String.valueOf(charAr);
	        if(hashMap.get(strValue) == null){
	            ArrayList<Integer> l = new ArrayList<Integer>();
                l.add(i+1);
                hashMap.put(strValue, l);
	        } else {
                hashMap.get(strValue).add(i + 1);
	        }
	        
	    }
	    for(ArrayList<Integer> l : hashMap.values()){
	           resultAarray.add(l);
	        }
	        
	        return resultAarray;
	    
	}
}

 
